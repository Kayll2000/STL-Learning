deque  （double-ended-queue 双端队列容器）

·deque容器擅长在序列尾部添加或删除元素（时间复杂度为O（1）），不擅长在序列中间添加或删除元素。
·deque容器可以根据需要修改自身的容量和大小。

和vector不同的是，deque擅长在序列头部添加或删除元素（时间复杂度为O(1)），deque容器中存储元素
并不能保证所有元素都存储到连续的内存空间中。
适用于向序列两端频繁的添加或删除元素的情况。

操作：
	创建空的容器  deque<int> var;
	创建10个有默认值（0）元素的容器  deque<int> var(10);
	创建10个值为5元素的容器  deque<int> var(10,5);
	拷贝创建 	deque<int> varbat(var);
	
拷贝普通数组创建：
	int a[] = {1,2,3,4,5};
	deque<int> d(a,a+5)
	array<int,5> arr{1,2,3,4,5};
	deque<int> d(arr.begin(),arr.end());

所有成员函数：

begin()	返回指向容器中第一个元素的迭代器。
end()	返回指向容器最后一个元素所在位置后一个位置的迭代器，通常和 begin() 结合使用。
rbegin()	返回指向最后一个元素的迭代器。
rend()	返回指向第一个元素所在位置前一个位置的迭代器。
cbegin()	和 begin() 功能相同，只不过在其基础上，增加了 const 属性，不能用于修改元素。
cend()	和 end() 功能相同，只不过在其基础上，增加了 const 属性，不能用于修改元素。
crbegin()	和 rbegin() 功能相同，只不过在其基础上，增加了 const 属性，不能用于修改元素。
crend()	和 rend() 功能相同，只不过在其基础上，增加了 const 属性，不能用于修改元素。
size()	返回实际元素个数。
max_size()	返回容器所能容纳元素个数的最大值。这通常是一个很大的值，一般是 232-1，我们很少会用到这个函数。
resize()	改变实际元素的个数。
empty()	判断容器中是否有元素，若无元素，则返回 true；反之，返回 false。
shrink _to_fit()	将内存减少到等于当前元素实际所使用的大小。
at()	使用经过边界检查的索引访问元素。
front()	返回第一个元素的引用。
back()	返回最后一个元素的引用。
assign()	用新元素替换原有内容。
push_back()	在序列的尾部添加一个元素。
push_front()	在序列的头部添加一个元素。
pop_back()	移除容器尾部的元素。
pop_front()	移除容器头部的元素。
insert()	在指定的位置插入一个或多个元素。
erase()	移除一个元素或一段元素。
clear()	移出所有的元素，容器大小变为 0。
swap()	交换两个容器的所有元素。
emplace()	在指定的位置直接生成一个元素。
emplace_front()	在容器头部生成一个元素。和 push_front() 的区别是，该函数直接在容器头部构造元素，省去了复制移动元素的过程。
emplace_back()	在容器尾部生成一个元素。和 push_back() 的区别是，该函数直接在容器尾部构造元素，省去了复制移动元素的过程。

注意事项：
当向 deque 容器添加元素时，deque 容器会申请更多的内存空间，同时其包含的所有元素可能会被复制或移动到新的内存地址（原来占用的内存会释放），
这会导致之前创建的迭代器失效。

cbegin()/cend() 成员函数和 begin()/end() 唯一不同的是，前者返回的是 const 类型的正向迭代器，后者返回一个可修改的迭代器，所以cbegin和cend函数
只能用于遍历和访问元素，不可修改。
	auto it = var.begin();
	auto iter = var.cbegin();
	*it = 0;	//正确，将第一个元素改为0
	*iter = 0;	//错误，因为返回的是const类型，不能修改
deque容器中元素的访问：
	deque<int> d{1,2,4,5,6};
	d[1] = 6;
	d.at(1) = 5;
想有效地避免越界访问，可以使用 deque 模板类提供的 at() 成员函数，由于该函数会返回容器中指定位置处元素的引用形式，
因此利用该函数的返回值，既可以访问指定位置处的元素，如果需要还可以对其进行修改。
deque 容器在重载 [] 运算符时，没有实现边界检查的功能。如果每次访问元素，都去检查索引值，无疑会产生很多开销。当不存在越界访问的可能时，就能避免这种开销。

